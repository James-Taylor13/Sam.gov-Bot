import time
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import slack
import os
import os.path
import urllib.request, json 
import json

#import dash libraries
import pandas as pd
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output

from os import getppid, path
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from urllib.request import urlopen
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials


#Setup for Google Sheets and Drive API
scope = ['https://www.googleapis.com/auth/spreadsheets','https://www.googleapis.com/auth/drive']

creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)

googleClient = gspread.authorize(creds)


sheetID = "12bT-9A53WKMv5g8cTfn8MKNFCb7ExNW1Tp3fjYW-7ZA/edit#gid=0"

googleSheet = googleClient.open_by_url("https://docs.google.com/spreadsheets/d/12bT-9A53WKMv5g8cTfn8MKNFCb7ExNW1Tp3fjYW-7ZA/edit#gid=0").sheet1

#Denoting where the path for our environment variable file is and then loading it in
env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

#Load variable from .env and set as our token
client = slack.WebClient(token=os.environ['SLACK_TOKEN'])

#sam gov api url
samUrl = "https://api.sam.gov/prod/opportunities/v1/search?limit=100&api_key=7T7nOP04bFAqPWSRhvcRCEQ5sZJ0G99BUOBRTCJw&title=artificial_intelligence&postedFrom=05/10/2020&postedTo=05/9/2021"

 #start the app
app = dash.Dash(__name__)

df = pd.read_csv('SamGovBot - Sheet1.csv')


def openFilesJson():
    if path.exists("SAM_GOV_AI_SEARCH_RESULTS.json"):
        print("File SAM_GOV_AI_SEARCH_RESULTS exist")
    else:
        txtFile = open("SAM_GOV_AI_SEARCH_RESULTS.json" , "w")
        txtFile.close

def openFileTxt():
    if path.exists("SAM_GOV_AI_SEARCH_RESULTS_TXT"):
        print("File SAM_GOV_AI_SEARCH_RESULTS_TXT exist")
    else:
        txtFile = open("SAM_GOV_AI_SEARCH_RESULTS_TXT" , "w")
        txtFile.close
   
   
def callApi():
    samDataJson = urllib.request.urlopen(samUrl)

    data = json.loads(samDataJson.read().decode())
    infoDump(data)

def infoDump(data):
    with open('SAM_GOV_AI_SEARCH_RESULTS.json', 'w') as f:
        samJsonFile = json.dumps(data)
        f.write(samJsonFile)
        f.close()

def writeFile(title):
    txtFile = open("SAM_GOV_AI_SEARCH_RESULTS_TXT" , "a")
    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")


    txtFile.write("Search Start Time: " + dt_string + "\n")
    txtFile.write("Title: " + title + "\n")
    
    
    txtFile.write("\n")
    txtFile.close()


def sameTitle(title):
    sameTitle = True
    txtFile = open("SAM_GOV_AI_SEARCH_RESULTS_TXT", "r")

    #search time is here to bypass reading the first line of the file
    searchTime = txtFile.readline()
    oldTitle = txtFile.readline()

    newTitle = ("Title: " + title + "\n")

    print("Test: " + oldTitle)
    print("Test: " + newTitle)

    if oldTitle == newTitle:
        sameTitle = True
        
    else:
        sameTitle = False
    
    txtFile.close

    return sameTitle

def main():

    openFileTxt()
    openFilesJson()

    try:
        callApi()
    except:
        print("SAM GOV API USE LIMIT REACHED")

    with open("SAM_GOV_AI_SEARCH_RESULTS.json") as f:
        data = json.load(f)
        
    
    for opportunitiesData in data['opportunitiesData']:
        lastTitle = opportunitiesData['title']

    print("Last " + lastTitle)

    writeFile(lastTitle)
    titleSame = sameTitle(lastTitle)

    for opportunitiesData in data['opportunitiesData']:
        

        

        info = ("Title: " + opportunitiesData['title'] + " \n" + "Department: " + 
         opportunitiesData['department'] + " \n" + "Office: " +  opportunitiesData['office'] 
        +  " \n" + "postedDate: " +  opportunitiesData['postedDate'] +  " \n" 
        +"Name: " + opportunitiesData['pointOfContact'][0]['fullName'] +  " \n" 
        + "Email: " + opportunitiesData['pointOfContact'][0]['email'] +  " \n" 
        + "Phone Number: " + opportunitiesData['pointOfContact'][0]['phone'] +  " \n")  

        

        

        

        print(titleSame)

        if (titleSame):
             print("No new information")
             client.chat_postMessage(channel='#bot_test', 
             text= 'There are no new postings for "Artificial Intelligence" on SAM.gov at the moment. \n We will keep you updated for the next post! You can find previous search results here: https://docs.google.com/spreadsheets/d/12bT-9A53WKMv5g8cTfn8MKNFCb7ExNW1Tp3fjYW-7ZA/edit#gid=0' )
             break
        else:
            print(info)
            client.chat_postMessage(channel='#bot_test', 
            text= (info + "To get past search results click this link: https://docs.google.com/spreadsheets/d/12bT-9A53WKMv5g8cTfn8MKNFCb7ExNW1Tp3fjYW-7ZA/edit#gid=0" ))
        
            now = datetime.now()
            dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
            
            insertRow = [dt_string, opportunitiesData['title'], opportunitiesData['department'], 
            opportunitiesData['postedDate'], opportunitiesData['pointOfContact'][0]['fullName'], 
            opportunitiesData['pointOfContact'][0]['email'],  opportunitiesData['pointOfContact'][0]
            ['phone']]
            googleSheet.append_row(insertRow, value_input_option='RAW')
            

    



if __name__ == '__main__':
    main()
    






